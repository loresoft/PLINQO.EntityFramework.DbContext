<%@ Template Language="C#" TargetLanguage="C#" Debug="True" Encoding="UTF-8" %>

<%@ Assembly Src="Model.cs" %>
<%@ Assembly Src="Extensions.cs" %>

<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>

<%@ Import Namespace="SchemaMapper" %>

<%@ Property Name="EntityContext" Type="SchemaMapper.EntityContext"  %>

<%@ Property Name="ContextClassName" Type="System.String"  %>
<%@ Property Name="ContextConnectionName" Type="System.String"  %>
<%@ Property Name="ContextNamespace" Type="System.String"  %>
<%@ Property Name="EntityNamespace" Type="System.String"  %>
<%@ Property Name="MappingNamespace" Type="System.String"  %>
<%@ Property Name="InterfaceMode" Type="Boolean" Default="False" Optional="True" %>

//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;

namespace <%= ContextNamespace %>
{
<% if (InterfaceMode) { %>
    [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
    public interface IDbContext : IDisposable
    {
        System.Data.Entity.Database Database { get; }
        System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get; }
        System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get; }

        System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity);
        System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;

        IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors();

        System.Data.Entity.DbSet Set(Type entityType);
        System.Data.Entity.IDbSet<TEntity> Set<TEntity>() where TEntity : class;

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
    }

    [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
    public partial interface I<%= ContextClassName.ToSafeName() %> : IDbContext
    {
<% foreach(var p in EntityContext.Entities) { %>
        System.Data.Entity.IDbSet<<%= EntityNamespace %>.<%= p.ClassName.ToSafeName() %>> <%= p.ContextName.ToSafeName() %> { get; set; }
<% } // foreach %>
    }

<% } // if interface %>
    [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
    public partial class <%= ContextClassName.ToSafeName() %>
        : System.Data.Entity.DbContext<%= InterfaceMode ? ", I" + ContextClassName.ToSafeName() : string.Empty %>
    {
 
        public <%= ContextClassName.ToSafeName() %>()
            :base("Name=<%= ContextConnectionName.ToSafeName() %>")
        {
            InitializeContext();
        }

        public <%= ContextClassName.ToSafeName() %>(System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base("Name=<%= ContextConnectionName.ToSafeName() %>", model)
        {
            InitializeContext();
        }

        public <%= ContextClassName.ToSafeName() %>(string nameOrConnectionString)
            : base(nameOrConnectionString)
        {
            InitializeContext();
        }

        public <%= ContextClassName.ToSafeName() %>(string nameOrConnectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(nameOrConnectionString, model)
        {
            InitializeContext();
        }

        public <%= ContextClassName.ToSafeName() %>(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
            InitializeContext();
        }

        public <%= ContextClassName.ToSafeName() %>(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
            InitializeContext();
        }


<% foreach(var p in EntityContext.Entities) { %>
        public System.Data.Entity.<%= InterfaceMode ? "I" : "" %>DbSet<<%= EntityNamespace %>.<%= p.ClassName.ToSafeName() %>> <%= p.ContextName.ToSafeName() %> { get; set; }
<% } // foreach %>

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
<% foreach(var p in EntityContext.Entities) { %>
            modelBuilder.Configurations.Add(new <%= MappingNamespace %>.<%= p.MappingName.ToSafeName() %>());
<% } // foreach %>

            InitializeMapping(modelBuilder);
        }
<% if (InterfaceMode) { %>

        System.Data.Entity.IDbSet<TEntity> IDbContext.Set<TEntity>()
        {
            return base.Set<TEntity>();
        }
<% } // if interface %>

        partial void InitializeContext();
        partial void InitializeMapping(System.Data.Entity.DbModelBuilder modelBuilder);
    }
}