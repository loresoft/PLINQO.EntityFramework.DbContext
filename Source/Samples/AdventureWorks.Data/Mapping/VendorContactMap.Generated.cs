//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace AdventureWorks.Data.Mapping
{
    public partial class VendorContactMap
        : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AdventureWorks.Data.Entities.VendorContact>
    {
        public VendorContactMap()
        {
            // table
            ToTable("VendorContact", "Purchasing");

            // keys
            HasKey(t => new { t.VendorID, t.ContactID });

            // Properties
            Property(t => t.VendorID)
                .HasColumnName("VendorID")
                .HasDatabaseGeneratedOption(DatabaseGeneratedOption.None)
                .IsRequired();
            Property(t => t.ContactID)
                .HasColumnName("ContactID")
                .HasDatabaseGeneratedOption(DatabaseGeneratedOption.None)
                .IsRequired();
            Property(t => t.ContactTypeID)
                .HasColumnName("ContactTypeID")
                .IsRequired();
            Property(t => t.ModifiedDate)
                .HasColumnName("ModifiedDate")
                .IsRequired();

            // Relationships
            HasRequired(t => t.Contact)
                .WithMany(t => t.VendorContacts)
                .HasForeignKey(d => d.ContactID)
                .WillCascadeOnDelete(false);
            HasRequired(t => t.ContactType)
                .WithMany(t => t.VendorContacts)
                .HasForeignKey(d => d.ContactTypeID)
                .WillCascadeOnDelete(false);
            HasRequired(t => t.Vendor)
                .WithMany(t => t.VendorContacts)
                .HasForeignKey(d => d.VendorID)
                .WillCascadeOnDelete(false);

            InitializeMapping();
        }
    }
}
