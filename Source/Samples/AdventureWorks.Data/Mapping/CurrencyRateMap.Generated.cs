//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace AdventureWorks.Data.Mapping
{
    public partial class CurrencyRateMap
        : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AdventureWorks.Data.Entities.CurrencyRate>
    {
        public CurrencyRateMap()
        {
            // table
            ToTable("CurrencyRate", "Sales");

            // keys
            HasKey(t => t.CurrencyRateID);

            // Properties
            Property(t => t.CurrencyRateID)
                .HasColumnName("CurrencyRateID")
                .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity)
                .IsRequired();
            Property(t => t.CurrencyRateDate)
                .HasColumnName("CurrencyRateDate")
                .IsRequired();
            Property(t => t.FromCurrencyCode)
                .HasColumnName("FromCurrencyCode")
                .HasMaxLength(3)
                .IsRequired();
            Property(t => t.ToCurrencyCode)
                .HasColumnName("ToCurrencyCode")
                .HasMaxLength(3)
                .IsRequired();
            Property(t => t.AverageRate)
                .HasColumnName("AverageRate")
                .HasPrecision(19, 4)
                .IsRequired();
            Property(t => t.EndOfDayRate)
                .HasColumnName("EndOfDayRate")
                .HasPrecision(19, 4)
                .IsRequired();
            Property(t => t.ModifiedDate)
                .HasColumnName("ModifiedDate")
                .IsRequired();

            // Relationships
            HasRequired(t => t.FromCurrency)
                .WithMany(t => t.FromCurrencyRates)
                .HasForeignKey(d => d.FromCurrencyCode)
                .WillCascadeOnDelete(false);
            HasRequired(t => t.ToCurrency)
                .WithMany(t => t.ToCurrencyRates)
                .HasForeignKey(d => d.ToCurrencyCode)
                .WillCascadeOnDelete(false);

            InitializeMapping();
        }
    }
}
