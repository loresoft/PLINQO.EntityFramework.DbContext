//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace AdventureWorks.Data.Mapping
{
    public partial class SalesOrderHeaderMap
        : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AdventureWorks.Data.Entities.SalesOrderHeader>
    {
        public SalesOrderHeaderMap()
        {
            // table
            ToTable("SalesOrderHeader", "Sales");

            // keys
            HasKey(t => t.SalesOrderID);

            // Properties
            Property(t => t.SalesOrderID)
                .HasColumnName("SalesOrderID")
                .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity)
                .IsRequired();
            Property(t => t.RevisionNumber)
                .HasColumnName("RevisionNumber")
                .IsRequired();
            Property(t => t.OrderDate)
                .HasColumnName("OrderDate")
                .IsRequired();
            Property(t => t.DueDate)
                .HasColumnName("DueDate")
                .IsRequired();
            Property(t => t.ShipDate)
                .HasColumnName("ShipDate")
                .IsOptional();
            Property(t => t.Status)
                .HasColumnName("Status")
                .IsRequired();
            Property(t => t.OnlineOrderFlag)
                .HasColumnName("OnlineOrderFlag")
                .IsRequired();
            Property(t => t.SalesOrderNumber)
                .HasColumnName("SalesOrderNumber")
                .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Computed)
                .HasMaxLength(25)
                .IsRequired();
            Property(t => t.PurchaseOrderNumber)
                .HasColumnName("PurchaseOrderNumber")
                .HasMaxLength(25)
                .IsOptional();
            Property(t => t.AccountNumber)
                .HasColumnName("AccountNumber")
                .HasMaxLength(15)
                .IsOptional();
            Property(t => t.CustomerID)
                .HasColumnName("CustomerID")
                .IsRequired();
            Property(t => t.ContactID)
                .HasColumnName("ContactID")
                .IsRequired();
            Property(t => t.SalesPersonID)
                .HasColumnName("SalesPersonID")
                .IsOptional();
            Property(t => t.TerritoryID)
                .HasColumnName("TerritoryID")
                .IsOptional();
            Property(t => t.BillToAddressID)
                .HasColumnName("BillToAddressID")
                .IsRequired();
            Property(t => t.ShipToAddressID)
                .HasColumnName("ShipToAddressID")
                .IsRequired();
            Property(t => t.ShipMethodID)
                .HasColumnName("ShipMethodID")
                .IsRequired();
            Property(t => t.CreditCardID)
                .HasColumnName("CreditCardID")
                .IsOptional();
            Property(t => t.CreditCardApprovalCode)
                .HasColumnName("CreditCardApprovalCode")
                .HasMaxLength(15)
                .IsOptional();
            Property(t => t.CurrencyRateID)
                .HasColumnName("CurrencyRateID")
                .IsOptional();
            Property(t => t.SubTotal)
                .HasColumnName("SubTotal")
                .HasPrecision(19, 4)
                .IsRequired();
            Property(t => t.TaxAmt)
                .HasColumnName("TaxAmt")
                .HasPrecision(19, 4)
                .IsRequired();
            Property(t => t.Freight)
                .HasColumnName("Freight")
                .HasPrecision(19, 4)
                .IsRequired();
            Property(t => t.TotalDue)
                .HasColumnName("TotalDue")
                .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Computed)
                .HasPrecision(19, 4)
                .IsRequired();
            Property(t => t.Comment)
                .HasColumnName("Comment")
                .HasMaxLength(128)
                .IsOptional();
            Property(t => t.Rowguid)
                .HasColumnName("rowguid")
                .IsRequired();
            Property(t => t.ModifiedDate)
                .HasColumnName("ModifiedDate")
                .IsRequired();

            // Relationships
            HasRequired(t => t.BillToAddress)
                .WithMany(t => t.BillToSalesOrderHeaders)
                .HasForeignKey(d => d.BillToAddressID)
                .WillCascadeOnDelete(false);
            HasRequired(t => t.ShipToAddress)
                .WithMany(t => t.ShipToSalesOrderHeaders)
                .HasForeignKey(d => d.ShipToAddressID)
                .WillCascadeOnDelete(false);
            HasRequired(t => t.Contact)
                .WithMany(t => t.SalesOrderHeaders)
                .HasForeignKey(d => d.ContactID)
                .WillCascadeOnDelete(false);
            HasOptional(t => t.CreditCard)
                .WithMany(t => t.SalesOrderHeaders)
                .HasForeignKey(d => d.CreditCardID)
                .WillCascadeOnDelete(false);
            HasOptional(t => t.CurrencyRate)
                .WithMany(t => t.SalesOrderHeaders)
                .HasForeignKey(d => d.CurrencyRateID)
                .WillCascadeOnDelete(false);
            HasRequired(t => t.Customer)
                .WithMany(t => t.SalesOrderHeaders)
                .HasForeignKey(d => d.CustomerID)
                .WillCascadeOnDelete(false);
            HasOptional(t => t.SalesPerson)
                .WithMany(t => t.SalesOrderHeaders)
                .HasForeignKey(d => d.SalesPersonID)
                .WillCascadeOnDelete(false);
            HasOptional(t => t.SalesTerritory)
                .WithMany(t => t.SalesOrderHeaders)
                .HasForeignKey(d => d.TerritoryID)
                .WillCascadeOnDelete(false);
            HasRequired(t => t.ShipMethod)
                .WithMany(t => t.SalesOrderHeaders)
                .HasForeignKey(d => d.ShipMethodID)
                .WillCascadeOnDelete(false);
            HasMany(t => t.SalesReasons)
                .WithMany(t => t.SalesOrderHeaders)
                .Map(m =>
                {
                    m.ToTable("SalesOrderHeaderSalesReason", "Sales");
                    m.MapLeftKey("SalesOrderID");
                    m.MapRightKey("SalesReasonID");
                });

            InitializeMapping();
        }
    }
}
