//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;

namespace AdventureWorks.Data.Mocks
{
    internal partial class FakeAdventureWorksContext
        : AdventureWorks.Data.IAdventureWorksContext
    {        
        public FakeAdventureWorksContext()
        {
            AWBuildVersions = new FakeDbSet<AdventureWorks.Data.Entities.AWBuildVersion> { FindExpression = v => e => e.SystemInformationID == (byte)v[0] };
            DatabaseLogs = new FakeDbSet<AdventureWorks.Data.Entities.DatabaseLog> { FindExpression = v => e => e.DatabaseLogID == (int)v[0] };
            ErrorLogs = new FakeDbSet<AdventureWorks.Data.Entities.ErrorLog> { FindExpression = v => e => e.ErrorLogID == (int)v[0] };
            Departments = new FakeDbSet<AdventureWorks.Data.Entities.Department> { FindExpression = v => e => e.DepartmentID == (short)v[0] };
            Employees = new FakeDbSet<AdventureWorks.Data.Entities.Employee> { FindExpression = v => e => e.EmployeeID == (int)v[0] };
            Contacts = new FakeDbSet<AdventureWorks.Data.Entities.Contact> { FindExpression = v => e => e.ContactID == (int)v[0] };
            Address = new FakeDbSet<AdventureWorks.Data.Entities.Address> { FindExpression = v => e => e.AddressID == (int)v[0] };
            EmployeeDepartmentHistories = new FakeDbSet<AdventureWorks.Data.Entities.EmployeeDepartmentHistory> { FindExpression = v => e => e.EmployeeID == (int)v[0] && e.DepartmentID == (short)v[1] && e.ShiftID == (byte)v[2] && e.StartDate == (System.DateTime)v[3] };
            Shifts = new FakeDbSet<AdventureWorks.Data.Entities.Shift> { FindExpression = v => e => e.ShiftID == (byte)v[0] };
            EmployeePayHistories = new FakeDbSet<AdventureWorks.Data.Entities.EmployeePayHistory> { FindExpression = v => e => e.EmployeeID == (int)v[0] && e.RateChangeDate == (System.DateTime)v[1] };
            JobCandidates = new FakeDbSet<AdventureWorks.Data.Entities.JobCandidate> { FindExpression = v => e => e.JobCandidateID == (int)v[0] };
            StateProvinces = new FakeDbSet<AdventureWorks.Data.Entities.StateProvince> { FindExpression = v => e => e.StateProvinceID == (int)v[0] };
            AddressTypes = new FakeDbSet<AdventureWorks.Data.Entities.AddressType> { FindExpression = v => e => e.AddressTypeID == (int)v[0] };
            ContactTypes = new FakeDbSet<AdventureWorks.Data.Entities.ContactType> { FindExpression = v => e => e.ContactTypeID == (int)v[0] };
            CountryRegions = new FakeDbSet<AdventureWorks.Data.Entities.CountryRegion> { FindExpression = v => e => e.CountryRegionCode == (string)v[0] };
            SalesTerritories = new FakeDbSet<AdventureWorks.Data.Entities.SalesTerritory> { FindExpression = v => e => e.TerritoryID == (int)v[0] };
            BillOfMaterials = new FakeDbSet<AdventureWorks.Data.Entities.BillOfMaterials> { FindExpression = v => e => e.BillOfMaterialsID == (int)v[0] };
            Products = new FakeDbSet<AdventureWorks.Data.Entities.Product> { FindExpression = v => e => e.ProductID == (int)v[0] };
            UnitMeasures = new FakeDbSet<AdventureWorks.Data.Entities.UnitMeasure> { FindExpression = v => e => e.UnitMeasureCode == (string)v[0] };
            Cultures = new FakeDbSet<AdventureWorks.Data.Entities.Culture> { FindExpression = v => e => e.CultureID == (string)v[0] };
            Documents = new FakeDbSet<AdventureWorks.Data.Entities.Document> { FindExpression = v => e => e.DocumentID == (int)v[0] };
            Illustrations = new FakeDbSet<AdventureWorks.Data.Entities.Illustration> { FindExpression = v => e => e.IllustrationID == (int)v[0] };
            Locations = new FakeDbSet<AdventureWorks.Data.Entities.Location> { FindExpression = v => e => e.LocationID == (short)v[0] };
            ProductModels = new FakeDbSet<AdventureWorks.Data.Entities.ProductModel> { FindExpression = v => e => e.ProductModelID == (int)v[0] };
            ProductSubcategories = new FakeDbSet<AdventureWorks.Data.Entities.ProductSubcategory> { FindExpression = v => e => e.ProductSubcategoryID == (int)v[0] };
            ProductCategories = new FakeDbSet<AdventureWorks.Data.Entities.ProductCategory> { FindExpression = v => e => e.ProductCategoryID == (int)v[0] };
            ProductCostHistories = new FakeDbSet<AdventureWorks.Data.Entities.ProductCostHistory> { FindExpression = v => e => e.ProductID == (int)v[0] && e.StartDate == (System.DateTime)v[1] };
            ProductDescriptions = new FakeDbSet<AdventureWorks.Data.Entities.ProductDescription> { FindExpression = v => e => e.ProductDescriptionID == (int)v[0] };
            ProductInventories = new FakeDbSet<AdventureWorks.Data.Entities.ProductInventory> { FindExpression = v => e => e.ProductID == (int)v[0] && e.LocationID == (short)v[1] };
            ProductListPriceHistories = new FakeDbSet<AdventureWorks.Data.Entities.ProductListPriceHistory> { FindExpression = v => e => e.ProductID == (int)v[0] && e.StartDate == (System.DateTime)v[1] };
            ProductModelProductDescriptionCultures = new FakeDbSet<AdventureWorks.Data.Entities.ProductModelProductDescriptionCulture> { FindExpression = v => e => e.ProductModelID == (int)v[0] && e.ProductDescriptionID == (int)v[1] && e.CultureID == (string)v[2] };
            ProductPhotos = new FakeDbSet<AdventureWorks.Data.Entities.ProductPhoto> { FindExpression = v => e => e.ProductPhotoID == (int)v[0] };
            ProductReviews = new FakeDbSet<AdventureWorks.Data.Entities.ProductReview> { FindExpression = v => e => e.ProductReviewID == (int)v[0] };
            ScrapReasons = new FakeDbSet<AdventureWorks.Data.Entities.ScrapReason> { FindExpression = v => e => e.ScrapReasonID == (short)v[0] };
            TransactionHistories = new FakeDbSet<AdventureWorks.Data.Entities.TransactionHistory> { FindExpression = v => e => e.TransactionID == (int)v[0] };
            TransactionHistoryArchives = new FakeDbSet<AdventureWorks.Data.Entities.TransactionHistoryArchive> { FindExpression = v => e => e.TransactionID == (int)v[0] };
            WorkOrders = new FakeDbSet<AdventureWorks.Data.Entities.WorkOrder> { FindExpression = v => e => e.WorkOrderID == (int)v[0] };
            WorkOrderRoutings = new FakeDbSet<AdventureWorks.Data.Entities.WorkOrderRouting> { FindExpression = v => e => e.WorkOrderID == (int)v[0] && e.ProductID == (int)v[1] && e.OperationSequence == (short)v[2] };
            ProductVendors = new FakeDbSet<AdventureWorks.Data.Entities.ProductVendor> { FindExpression = v => e => e.ProductID == (int)v[0] && e.VendorID == (int)v[1] };
            Vendors = new FakeDbSet<AdventureWorks.Data.Entities.Vendor> { FindExpression = v => e => e.VendorID == (int)v[0] };
            PurchaseOrderDetails = new FakeDbSet<AdventureWorks.Data.Entities.PurchaseOrderDetail> { FindExpression = v => e => e.PurchaseOrderID == (int)v[0] && e.PurchaseOrderDetailID == (int)v[1] };
            PurchaseOrderHeaders = new FakeDbSet<AdventureWorks.Data.Entities.PurchaseOrderHeader> { FindExpression = v => e => e.PurchaseOrderID == (int)v[0] };
            ShipMethods = new FakeDbSet<AdventureWorks.Data.Entities.ShipMethod> { FindExpression = v => e => e.ShipMethodID == (int)v[0] };
            VendorAddresses = new FakeDbSet<AdventureWorks.Data.Entities.VendorAddress> { FindExpression = v => e => e.VendorID == (int)v[0] && e.AddressID == (int)v[1] };
            VendorContacts = new FakeDbSet<AdventureWorks.Data.Entities.VendorContact> { FindExpression = v => e => e.VendorID == (int)v[0] && e.ContactID == (int)v[1] };
            CreditCards = new FakeDbSet<AdventureWorks.Data.Entities.CreditCard> { FindExpression = v => e => e.CreditCardID == (int)v[0] };
            Currencies = new FakeDbSet<AdventureWorks.Data.Entities.Currency> { FindExpression = v => e => e.CurrencyCode == (string)v[0] };
            CurrencyRates = new FakeDbSet<AdventureWorks.Data.Entities.CurrencyRate> { FindExpression = v => e => e.CurrencyRateID == (int)v[0] };
            Customers = new FakeDbSet<AdventureWorks.Data.Entities.Customer> { FindExpression = v => e => e.CustomerID == (int)v[0] };
            CustomerAddresses = new FakeDbSet<AdventureWorks.Data.Entities.CustomerAddress> { FindExpression = v => e => e.CustomerID == (int)v[0] && e.AddressID == (int)v[1] };
            Individuals = new FakeDbSet<AdventureWorks.Data.Entities.Individual> { FindExpression = v => e => e.CustomerID == (int)v[0] };
            SalesOrderDetails = new FakeDbSet<AdventureWorks.Data.Entities.SalesOrderDetail> { FindExpression = v => e => e.SalesOrderID == (int)v[0] && e.SalesOrderDetailID == (int)v[1] };
            SalesOrderHeaders = new FakeDbSet<AdventureWorks.Data.Entities.SalesOrderHeader> { FindExpression = v => e => e.SalesOrderID == (int)v[0] };
            SpecialOfferProducts = new FakeDbSet<AdventureWorks.Data.Entities.SpecialOfferProduct> { FindExpression = v => e => e.SpecialOfferID == (int)v[0] && e.ProductID == (int)v[1] };
            SalesPeople = new FakeDbSet<AdventureWorks.Data.Entities.SalesPerson> { FindExpression = v => e => e.SalesPersonID == (int)v[0] };
            SalesReasons = new FakeDbSet<AdventureWorks.Data.Entities.SalesReason> { FindExpression = v => e => e.SalesReasonID == (int)v[0] };
            SalesPersonQuotaHistories = new FakeDbSet<AdventureWorks.Data.Entities.SalesPersonQuotaHistory> { FindExpression = v => e => e.SalesPersonID == (int)v[0] && e.QuotaDate == (System.DateTime)v[1] };
            SalesTaxRates = new FakeDbSet<AdventureWorks.Data.Entities.SalesTaxRate> { FindExpression = v => e => e.SalesTaxRateID == (int)v[0] };
            SalesTerritoryHistories = new FakeDbSet<AdventureWorks.Data.Entities.SalesTerritoryHistory> { FindExpression = v => e => e.SalesPersonID == (int)v[0] && e.TerritoryID == (int)v[1] && e.StartDate == (System.DateTime)v[2] };
            ShoppingCartItems = new FakeDbSet<AdventureWorks.Data.Entities.ShoppingCartItem> { FindExpression = v => e => e.ShoppingCartItemID == (int)v[0] };
            SpecialOffers = new FakeDbSet<AdventureWorks.Data.Entities.SpecialOffer> { FindExpression = v => e => e.SpecialOfferID == (int)v[0] };
            Stores = new FakeDbSet<AdventureWorks.Data.Entities.Store> { FindExpression = v => e => e.CustomerID == (int)v[0] };
            StoreContacts = new FakeDbSet<AdventureWorks.Data.Entities.StoreContact> { FindExpression = v => e => e.CustomerID == (int)v[0] && e.ContactID == (int)v[1] };
        }

        public System.Data.Entity.IDbSet<AdventureWorks.Data.Entities.AWBuildVersion> AWBuildVersions { get; set; }
        public System.Data.Entity.IDbSet<AdventureWorks.Data.Entities.DatabaseLog> DatabaseLogs { get; set; }
        public System.Data.Entity.IDbSet<AdventureWorks.Data.Entities.ErrorLog> ErrorLogs { get; set; }
        public System.Data.Entity.IDbSet<AdventureWorks.Data.Entities.Department> Departments { get; set; }
        public System.Data.Entity.IDbSet<AdventureWorks.Data.Entities.Employee> Employees { get; set; }
        public System.Data.Entity.IDbSet<AdventureWorks.Data.Entities.Contact> Contacts { get; set; }
        public System.Data.Entity.IDbSet<AdventureWorks.Data.Entities.Address> Address { get; set; }
        public System.Data.Entity.IDbSet<AdventureWorks.Data.Entities.EmployeeDepartmentHistory> EmployeeDepartmentHistories { get; set; }
        public System.Data.Entity.IDbSet<AdventureWorks.Data.Entities.Shift> Shifts { get; set; }
        public System.Data.Entity.IDbSet<AdventureWorks.Data.Entities.EmployeePayHistory> EmployeePayHistories { get; set; }
        public System.Data.Entity.IDbSet<AdventureWorks.Data.Entities.JobCandidate> JobCandidates { get; set; }
        public System.Data.Entity.IDbSet<AdventureWorks.Data.Entities.StateProvince> StateProvinces { get; set; }
        public System.Data.Entity.IDbSet<AdventureWorks.Data.Entities.AddressType> AddressTypes { get; set; }
        public System.Data.Entity.IDbSet<AdventureWorks.Data.Entities.ContactType> ContactTypes { get; set; }
        public System.Data.Entity.IDbSet<AdventureWorks.Data.Entities.CountryRegion> CountryRegions { get; set; }
        public System.Data.Entity.IDbSet<AdventureWorks.Data.Entities.SalesTerritory> SalesTerritories { get; set; }
        public System.Data.Entity.IDbSet<AdventureWorks.Data.Entities.BillOfMaterials> BillOfMaterials { get; set; }
        public System.Data.Entity.IDbSet<AdventureWorks.Data.Entities.Product> Products { get; set; }
        public System.Data.Entity.IDbSet<AdventureWorks.Data.Entities.UnitMeasure> UnitMeasures { get; set; }
        public System.Data.Entity.IDbSet<AdventureWorks.Data.Entities.Culture> Cultures { get; set; }
        public System.Data.Entity.IDbSet<AdventureWorks.Data.Entities.Document> Documents { get; set; }
        public System.Data.Entity.IDbSet<AdventureWorks.Data.Entities.Illustration> Illustrations { get; set; }
        public System.Data.Entity.IDbSet<AdventureWorks.Data.Entities.Location> Locations { get; set; }
        public System.Data.Entity.IDbSet<AdventureWorks.Data.Entities.ProductModel> ProductModels { get; set; }
        public System.Data.Entity.IDbSet<AdventureWorks.Data.Entities.ProductSubcategory> ProductSubcategories { get; set; }
        public System.Data.Entity.IDbSet<AdventureWorks.Data.Entities.ProductCategory> ProductCategories { get; set; }
        public System.Data.Entity.IDbSet<AdventureWorks.Data.Entities.ProductCostHistory> ProductCostHistories { get; set; }
        public System.Data.Entity.IDbSet<AdventureWorks.Data.Entities.ProductDescription> ProductDescriptions { get; set; }
        public System.Data.Entity.IDbSet<AdventureWorks.Data.Entities.ProductInventory> ProductInventories { get; set; }
        public System.Data.Entity.IDbSet<AdventureWorks.Data.Entities.ProductListPriceHistory> ProductListPriceHistories { get; set; }
        public System.Data.Entity.IDbSet<AdventureWorks.Data.Entities.ProductModelProductDescriptionCulture> ProductModelProductDescriptionCultures { get; set; }
        public System.Data.Entity.IDbSet<AdventureWorks.Data.Entities.ProductPhoto> ProductPhotos { get; set; }
        public System.Data.Entity.IDbSet<AdventureWorks.Data.Entities.ProductReview> ProductReviews { get; set; }
        public System.Data.Entity.IDbSet<AdventureWorks.Data.Entities.ScrapReason> ScrapReasons { get; set; }
        public System.Data.Entity.IDbSet<AdventureWorks.Data.Entities.TransactionHistory> TransactionHistories { get; set; }
        public System.Data.Entity.IDbSet<AdventureWorks.Data.Entities.TransactionHistoryArchive> TransactionHistoryArchives { get; set; }
        public System.Data.Entity.IDbSet<AdventureWorks.Data.Entities.WorkOrder> WorkOrders { get; set; }
        public System.Data.Entity.IDbSet<AdventureWorks.Data.Entities.WorkOrderRouting> WorkOrderRoutings { get; set; }
        public System.Data.Entity.IDbSet<AdventureWorks.Data.Entities.ProductVendor> ProductVendors { get; set; }
        public System.Data.Entity.IDbSet<AdventureWorks.Data.Entities.Vendor> Vendors { get; set; }
        public System.Data.Entity.IDbSet<AdventureWorks.Data.Entities.PurchaseOrderDetail> PurchaseOrderDetails { get; set; }
        public System.Data.Entity.IDbSet<AdventureWorks.Data.Entities.PurchaseOrderHeader> PurchaseOrderHeaders { get; set; }
        public System.Data.Entity.IDbSet<AdventureWorks.Data.Entities.ShipMethod> ShipMethods { get; set; }
        public System.Data.Entity.IDbSet<AdventureWorks.Data.Entities.VendorAddress> VendorAddresses { get; set; }
        public System.Data.Entity.IDbSet<AdventureWorks.Data.Entities.VendorContact> VendorContacts { get; set; }
        public System.Data.Entity.IDbSet<AdventureWorks.Data.Entities.CreditCard> CreditCards { get; set; }
        public System.Data.Entity.IDbSet<AdventureWorks.Data.Entities.Currency> Currencies { get; set; }
        public System.Data.Entity.IDbSet<AdventureWorks.Data.Entities.CurrencyRate> CurrencyRates { get; set; }
        public System.Data.Entity.IDbSet<AdventureWorks.Data.Entities.Customer> Customers { get; set; }
        public System.Data.Entity.IDbSet<AdventureWorks.Data.Entities.CustomerAddress> CustomerAddresses { get; set; }
        public System.Data.Entity.IDbSet<AdventureWorks.Data.Entities.Individual> Individuals { get; set; }
        public System.Data.Entity.IDbSet<AdventureWorks.Data.Entities.SalesOrderDetail> SalesOrderDetails { get; set; }
        public System.Data.Entity.IDbSet<AdventureWorks.Data.Entities.SalesOrderHeader> SalesOrderHeaders { get; set; }
        public System.Data.Entity.IDbSet<AdventureWorks.Data.Entities.SpecialOfferProduct> SpecialOfferProducts { get; set; }
        public System.Data.Entity.IDbSet<AdventureWorks.Data.Entities.SalesPerson> SalesPeople { get; set; }
        public System.Data.Entity.IDbSet<AdventureWorks.Data.Entities.SalesReason> SalesReasons { get; set; }
        public System.Data.Entity.IDbSet<AdventureWorks.Data.Entities.SalesPersonQuotaHistory> SalesPersonQuotaHistories { get; set; }
        public System.Data.Entity.IDbSet<AdventureWorks.Data.Entities.SalesTaxRate> SalesTaxRates { get; set; }
        public System.Data.Entity.IDbSet<AdventureWorks.Data.Entities.SalesTerritoryHistory> SalesTerritoryHistories { get; set; }
        public System.Data.Entity.IDbSet<AdventureWorks.Data.Entities.ShoppingCartItem> ShoppingCartItems { get; set; }
        public System.Data.Entity.IDbSet<AdventureWorks.Data.Entities.SpecialOffer> SpecialOffers { get; set; }
        public System.Data.Entity.IDbSet<AdventureWorks.Data.Entities.Store> Stores { get; set; }
        public System.Data.Entity.IDbSet<AdventureWorks.Data.Entities.StoreContact> StoreContacts { get; set; }

        public System.Data.Entity.IDbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            return GetType().GetProperties()
                .Where(p => p.PropertyType == typeof(System.Data.Entity.IDbSet<TEntity>))
                .Select(p => p.GetValue(this, null) as System.Data.Entity.IDbSet<TEntity>)
                .Single();
        }

        public int SaveChanges()
        {
            return 0;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            return System.Threading.Tasks.Task<int>.FromResult(0);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task<int>.FromResult(0);
        }

        public void Dispose()
        {
        }

        #region NotImplementedException
        public System.Data.Entity.Database Database
        {
            get { throw new NotImplementedException(); }
        }

        public System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker
        {
            get { throw new NotImplementedException(); }
        }

        public System.Data.Entity.Infrastructure.DbContextConfiguration Configuration
        {
            get { throw new NotImplementedException(); }
        }

        public System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity)
        {
            throw new NotImplementedException();
        }

        public System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
        {
            throw new NotImplementedException();
        }

        public System.Data.Entity.DbSet Set(Type entityType)
        {
            throw new NotImplementedException();
        }
        #endregion
    }
    
    internal partial class FakeDbSet<TEntity>
        : System.Data.Entity.IDbSet<TEntity> where TEntity : class
    {
        private readonly System.Collections.ObjectModel.ObservableCollection<TEntity> _data;
        private readonly IQueryable<TEntity> _query;

        public FakeDbSet()
        {
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public Func<object[], Expression<Func<TEntity, bool>>> FindExpression { get; set; }

        public virtual TEntity Find(params object[] keyValues)
        {
            if (FindExpression == null)
                throw new NotImplementedException();

            return _query.SingleOrDefault(FindExpression(keyValues));
        }

        public TEntity Add(TEntity item)
        {
            _data.Add(item);
            return item;
        }

        public TEntity Remove(TEntity item)
        {
            _data.Remove(item);
            return item;
        }

        public TEntity Attach(TEntity item)
        {
            _data.Add(item);
            return item;
        }

        public void Detach(TEntity item)
        {
            _data.Remove(item);
        }

        Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return _query.Provider; }
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        IEnumerator<TEntity> IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        public TEntity Create()
        {
            return Activator.CreateInstance<TEntity>();
        }

        public System.Collections.ObjectModel.ObservableCollection<TEntity> Local
        {
            get { return _data; }
        }

        public TDerivedEntity Create<TDerivedEntity>()
            where TDerivedEntity : class, TEntity
        {
            return Activator.CreateInstance<TDerivedEntity>();
        }
    }
}
