//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace AdventureWorks.Data.Queries
{
    public static partial class BillOfMaterialsExtensions
    {

        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        public static AdventureWorks.Data.Entities.BillOfMaterials GetByKey(this System.Linq.IQueryable<AdventureWorks.Data.Entities.BillOfMaterials> queryable, int billOfMaterialsID)
        {
            var dbSet = queryable as System.Data.Entity.IDbSet<AdventureWorks.Data.Entities.BillOfMaterials>;
            if (dbSet != null)
                return dbSet.Find(billOfMaterialsID);
                
            return queryable.FirstOrDefault(b => b.BillOfMaterialsID == billOfMaterialsID);
        }

        /// <summary>
        /// Gets an instance by using a unique index.
        /// </summary>
        /// <returns>An instance of the entity or null if not found.</returns>
        public static AdventureWorks.Data.Entities.BillOfMaterials GetByProductAssemblyIDComponentIDStartDate(this IQueryable<AdventureWorks.Data.Entities.BillOfMaterials> queryable, int? productAssemblyID, int componentID, System.DateTime startDate)
        {
            return queryable.FirstOrDefault(b => (b.ProductAssemblyID == productAssemblyID || (productAssemblyID == null && b.ProductAssemblyID == null))
                && b.ComponentID == componentID
                && b.StartDate == startDate);
        }

        public static IQueryable<AdventureWorks.Data.Entities.BillOfMaterials> ByUnitMeasureCode(this IQueryable<AdventureWorks.Data.Entities.BillOfMaterials> queryable, string unitMeasureCode)
        {
            return queryable.Where(b => b.UnitMeasureCode == unitMeasureCode);
        }

        public static IQueryable<AdventureWorks.Data.Entities.BillOfMaterials> ByProductAssemblyID(this IQueryable<AdventureWorks.Data.Entities.BillOfMaterials> queryable, int? productAssemblyID)
        {
            return queryable.Where(b => (b.ProductAssemblyID == productAssemblyID || (productAssemblyID == null && b.ProductAssemblyID == null)));
        }

        public static IQueryable<AdventureWorks.Data.Entities.BillOfMaterials> ByComponentID(this IQueryable<AdventureWorks.Data.Entities.BillOfMaterials> queryable, int componentID)
        {
            return queryable.Where(b => b.ComponentID == componentID);
        }
    }
}
