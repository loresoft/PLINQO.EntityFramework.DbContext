//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace AdventureWorks.Data.Queries
{
    public static partial class ProductModelExtensions
    {

        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        public static AdventureWorks.Data.Entities.ProductModel GetByKey(this System.Linq.IQueryable<AdventureWorks.Data.Entities.ProductModel> queryable, int productModelID)
        {
            var dbSet = queryable as System.Data.Entity.IDbSet<AdventureWorks.Data.Entities.ProductModel>;
            if (dbSet != null)
                return dbSet.Find(productModelID);
                
            return queryable.FirstOrDefault(p => p.ProductModelID == productModelID);
        }

        /// <summary>
        /// Gets an instance by using a unique index.
        /// </summary>
        /// <returns>An instance of the entity or null if not found.</returns>
        public static AdventureWorks.Data.Entities.ProductModel GetByName(this IQueryable<AdventureWorks.Data.Entities.ProductModel> queryable, string name)
        {
            return queryable.FirstOrDefault(p => p.Name == name);
        }

        /// <summary>
        /// Gets an instance by using a unique index.
        /// </summary>
        /// <returns>An instance of the entity or null if not found.</returns>
        public static AdventureWorks.Data.Entities.ProductModel GetByRowguid(this IQueryable<AdventureWorks.Data.Entities.ProductModel> queryable, System.Guid rowguid)
        {
            return queryable.FirstOrDefault(p => p.Rowguid == rowguid);
        }

        public static IQueryable<AdventureWorks.Data.Entities.ProductModel> ByCatalogDescription(this IQueryable<AdventureWorks.Data.Entities.ProductModel> queryable, string catalogDescription)
        {
            return queryable.Where(p => (p.CatalogDescription == catalogDescription || (catalogDescription == null && p.CatalogDescription == null)));
        }

        public static IQueryable<AdventureWorks.Data.Entities.ProductModel> ByInstructions(this IQueryable<AdventureWorks.Data.Entities.ProductModel> queryable, string instructions)
        {
            return queryable.Where(p => (p.Instructions == instructions || (instructions == null && p.Instructions == null)));
        }
    }
}
