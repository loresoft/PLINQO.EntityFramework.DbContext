//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace AdventureWorks.Data.Queries
{
    public static partial class SalesPersonExtensions
    {

        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        public static AdventureWorks.Data.Entities.SalesPerson GetByKey(this System.Linq.IQueryable<AdventureWorks.Data.Entities.SalesPerson> queryable, int salesPersonID)
        {
            var dbSet = queryable as System.Data.Entity.IDbSet<AdventureWorks.Data.Entities.SalesPerson>;
            if (dbSet != null)
                return dbSet.Find(salesPersonID);
                
            return queryable.FirstOrDefault(s => s.SalesPersonID == salesPersonID);
        }

        /// <summary>
        /// Gets an instance by using a unique index.
        /// </summary>
        /// <returns>An instance of the entity or null if not found.</returns>
        public static AdventureWorks.Data.Entities.SalesPerson GetByRowguid(this IQueryable<AdventureWorks.Data.Entities.SalesPerson> queryable, System.Guid rowguid)
        {
            return queryable.FirstOrDefault(s => s.Rowguid == rowguid);
        }

        public static IQueryable<AdventureWorks.Data.Entities.SalesPerson> ByTerritoryID(this IQueryable<AdventureWorks.Data.Entities.SalesPerson> queryable, int? territoryID)
        {
            return queryable.Where(s => (s.TerritoryID == territoryID || (territoryID == null && s.TerritoryID == null)));
        }
    }
}
